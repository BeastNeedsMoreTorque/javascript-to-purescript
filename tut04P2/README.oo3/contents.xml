<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE outline PUBLIC "-//omnigroup.com//DTD OUTLINE 3.0//EN" "http://www.omnigroup.com/namespace/OmniOutliner/xmloutline-v3.dtd">
<outline xmlns="http://www.omnigroup.com/namespace/OmniOutliner/v3">
  <style-attribute-registry>
    <style-attribute version="0" key="font-family" group="font" name="family" class="string">Helvetica</style-attribute>
    <style-attribute version="1" key="font-fill" group="font" name="fill color" class="color">
      <color w="0"/>
    </style-attribute>
    <style-attribute version="0" key="font-size" group="font" name="size" class="number" integral="0" min="1" max="65536">12</style-attribute>
    <style-attribute version="0" key="font-weight" group="font" name="weight" class="number" integral="1" min="1" max="14">5</style-attribute>
    <style-attribute version="0" key="item-to-note-space(com.omnigroup.OmniOutliner)" group="row" name="above note padding" class="number" integral="1" min="0" max="1000">0</style-attribute>
    <style-attribute version="0" key="paragraph-alignment" group="paragraph" name="alignment" class="enum">
      <enum-name-table default-value="4">
        <enum-name-table-element value="0" name="left"/>
        <enum-name-table-element value="1" name="right"/>
        <enum-name-table-element value="2" name="center"/>
        <enum-name-table-element value="3" name="justified"/>
        <enum-name-table-element value="4" name="natural"/>
      </enum-name-table>
    </style-attribute>
    <style-attribute version="0" key="paragraph-base-writing-direction" group="paragraph" name="writing direction" class="enum">
      <enum-name-table default-value="-1">
        <enum-name-table-element value="-1" name="natural"/>
        <enum-name-table-element value="0" name="left-to-right"/>
        <enum-name-table-element value="1" name="right-to-left"/>
      </enum-name-table>
    </style-attribute>
    <style-attribute version="0" key="paragraph-line-height-multiple" group="paragraph" name="line height multiple" class="number" integral="0" min="0" max="1000">0</style-attribute>
    <style-attribute version="0" key="text-background-color" group="text" name="background color" class="color">
      <color w="0" a="0"/>
    </style-attribute>
  </style-attribute-registry>
  <named-styles>
    <named-style id="eUsXLp0Pv1g" name="Heading 1" display-order="0">
      <style>
        <value key="font-family">Helvetica Neue</value>
        <value key="font-fill">
          <color r="0.196247" g="0.196247" b="0.196247"/>
        </value>
        <value key="font-size">30</value>
        <value key="font-weight">3</value>
      </style>
    </named-style>
    <named-style id="d4-frBYwy2X" name="Heading 2" display-order="1">
      <style>
        <value key="font-family">Helvetica Neue</value>
        <value key="font-fill">
          <color r="0.196247" g="0.196247" b="0.196247"/>
        </value>
        <value key="font-size">18</value>
      </style>
    </named-style>
    <named-style id="kRw332h0q-G" name="Heading 3" display-order="2">
      <style>
        <value key="font-family">Helvetica Neue</value>
        <value key="font-size">13</value>
        <value key="font-weight">6</value>
      </style>
    </named-style>
    <named-style id="nU7Pax9sHwm" name="Highlight: Yellow" display-order="3">
      <style>
        <value key="text-background-color">
          <color r="1" g="0.733334" b="0" a="0.25"/>
        </value>
      </style>
    </named-style>
    <named-style id="m6c_M2fT6yP" name="Highlight: Red" display-order="4">
      <style>
        <value key="text-background-color">
          <color r="0.94902" g="0.376471" b="0.466667" a="0.25"/>
        </value>
      </style>
    </named-style>
    <named-style id="auoqZ5xVKeG" name="Highlight: Green" display-order="5">
      <style>
        <value key="text-background-color">
          <color r="0.406736" g="0.736132" b="0.210461" a="0.25"/>
        </value>
      </style>
    </named-style>
    <named-style id="hE9mXgl4a8m" name="Purple" display-order="6">
      <style>
        <value key="font-fill">
          <color r="0.588981" g="0.38239" b="0.815403"/>
        </value>
      </style>
    </named-style>
    <named-style id="l2kopvXC4ak" name="Blue" display-order="7">
      <style>
        <value key="font-fill">
          <color r="0.227451" g="0.556863" b="0.929412"/>
        </value>
      </style>
    </named-style>
    <named-style id="f7F2187eZ56" name="Bondi" display-order="8">
      <style>
        <value key="font-fill">
          <color r="0" g="0.749538" b="0.75371"/>
        </value>
      </style>
    </named-style>
    <named-style id="kJhkVDl2Xsd" name="Green" display-order="9">
      <style>
        <value key="font-fill">
          <color r="0.406736" g="0.736132" b="0.210461"/>
        </value>
      </style>
    </named-style>
    <named-style id="inNRQJ-da6E" name="Yellow" display-order="10">
      <style>
        <value key="font-fill">
          <color r="1" g="0.733334" b="0"/>
        </value>
      </style>
    </named-style>
    <named-style id="nAm7imW-teW" name="Orange" display-order="11">
      <style>
        <value key="font-fill">
          <color r="1" g="0.568627" b="0.301961"/>
        </value>
      </style>
    </named-style>
    <named-style id="jtC-ndQ7Pcw" name="Red" display-order="12">
      <style>
        <value key="font-fill">
          <color r="0.94902" g="0.376471" b="0.466667"/>
        </value>
      </style>
    </named-style>
    <named-style id="dI8s4BxgdIs" name="Graphite" display-order="13">
      <style>
        <value key="font-fill">
          <color r="0.419608" g="0.486275" b="0.647059"/>
        </value>
      </style>
    </named-style>
  </named-styles>
  <settings>
    <base-style>
      <style>
        <value key="font-family">Helvetica Neue</value>
        <value key="font-size">13</value>
        <value key="item-to-note-space(com.omnigroup.OmniOutliner)">4</value>
        <value key="paragraph-base-writing-direction">left-to-right</value>
        <value key="paragraph-line-height-multiple">1.1</value>
      </style>
    </base-style>
    <print-info>
      <print-info-key name="OOScaleDocumentToFitPageWidth" type="boolean">true</print-info-key>
    </print-info>
    <auto-generate-level-styles>no</auto-generate-level-styles>
  </settings>
  <editor content-size="{1090, 704}" scroll-position="{0, 489}" outline-title-display-mode="always" column-titles-display-mode="auto" status-visible="no" hide-attachment-tags="yes" is-spellchecking-enabled="yes">
    <drawer display="sections" width="185" palette-height="310"/>
    <note-split-view height="141"/>
    <selected-rows ids="bT3BgigE-zW"/>
    <selected-columns ids="jFqHUGd_Dg1"/>
    <selected-characters range="{393, 0}"/>
  </editor>
  <outline-title>
    <text>
      <p>
        <run>
          <style>
            <value key="font-size">12</value>
            <value key="paragraph-alignment">center</value>
          </style>
          <lit><cell variable="OODocumentFilenameVariableIdentifier"/></lit>
        </run>
      </p>
    </text>
  </outline-title>
  <columns>
    <column id="dTpN3JwYpBn" type="text" width="18" minimum-width="18" maximum-width="18" text-export-width="1" is-note-column="yes">
      <style>
        <value key="font-fill">
          <color r="0.33" g="0.33" b="0.33"/>
        </value>
        <value key="font-size">11</value>
      </style>
      <title>
        <text>
          <p/>
        </text>
      </title>
    </column>
    <column id="jFqHUGd_Dg1" type="text" width="1069" minimum-width="13" maximum-width="1000000" text-export-width="72" is-outline-column="yes">
      <title>
        <text>
          <p>
            <run>
              <lit>Topic</lit>
            </run>
          </p>
        </text>
      </title>
    </column>
  </columns>
  <root>
    <style>
      <value key="font-weight">6</value>
    </style>
    <item id="oQsgWXZnaO7" expanded="yes">
      <values>
        <text>
          <p>
            <run>
              <lit>Introduction</lit>
            </run>
          </p>
        </text>
      </values>
      <children>
        <item id="m4Qzu-N-6E5">
          <values>
            <text>
              <p>
                <run>
                  <lit>In Part 1, I covered how to handle side effects in PureScript.  Recall that a function or expression creates a side effect whenever it modifies some state outside its scope, or it has an observable interaction with its calling function or the outside world.  The core concept is that we don&apos;t eliminate side effects because we need them to be able to write useful code.  Instead, we aim to represent them in our code in a way that distinguishes them from our pure computations.  A benefit is that readers or future maintainers of our code will readily understand what side effects we have created and where we generated them.</lit>
                </run>
              </p>
            </text>
          </values>
        </item>
        <item id="ciEf3TPRHyA">
          <values>
            <text>
              <p>
                <run>
                  <lit>I focused on a particular class of side effects, called &apos;native&apos; side effects (NSEs), and these are side effects that are generated by the runtime system.  Console IO, random number generation, and file IO are all examples of NSEs.  You&apos;ve already learned how to implement console IO and random number generation in PureScript in Part 1.  Now I’ll show you how to perform File IO.  But this is not all you are going to learn in this tutorial.  My objective is to sync back up with Brian’s [4th tutorial](</lit>
                </run>
                <run>
                  <lit><cell href="https://egghead.io/lessons/javascript-composable-error-handling-with-either" name="https://egghead.io/lessons/javascript-composable-error-handling-with-either" type="link"/></lit>
                </run>
                <run>
                  <lit>) by showing how the `bind` abstraction is used to compose nested `Either`s together in PureScript.  One word of caution about FP semantics - `bind` in PureScript is equivalent to `chain` in Brian’s JavaScript tutorial.  In other languages and tutorials, `bind` may also be disguised as `flatmap`.</lit>
                </run>
              </p>
            </text>
          </values>
        </item>
      </children>
    </item>
    <item id="nclPaMD8a4m" expanded="yes">
      <values>
        <text>
          <p>
            <run>
              <lit>JavaScript Try/Catch Pattern</lit>
            </run>
          </p>
        </text>
      </values>
      <children>
        <item id="aCYizSqN776">
          <values>
            <text>
              <p>
                <run>
                  <lit>Let’s start with a popular design pattern for exception handling called try/catch.  At a high level, a try block lets you test a block of code for errors, and the accompanying catch block will handle any errors.  The JavaScript code example below, from Brian&apos;s tutorial, reads a configuration file using the readFileSync method from Node.js and returns a port number.  I have prepared the configuration file containing the JSON object, {“port”: 8888}.  This code parses the JSON object and grabs the port number.  Then, assuming all went well, the try block will return the port number.  But if either readFileSync or JSON.parse fails then the `catch` block will return a default port number of 3000.  Finally, I log the result to the console.</lit>
                </run>
              </p>
            </text>
          </values>
        </item>
        <item id="kbhHDk8gX2F">
          <values>
            <text>
              <p>
                <run>
                  <lit>```</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>const fs = require(&apos;fs&apos;)</lit>
                </run>
              </p>
              <p/>
              <p>
                <run>
                  <lit>const getPort = () =&gt; {</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>  try {</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>    const str = fs.readFileSync(&apos;config.json&apos;)</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>    const config = JSON.parse(str)</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>    return config.port</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>  } catch(e) {</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>    return 3000</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>  }</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>}</lit>
                </run>
              </p>
              <p/>
              <p>
                <run>
                  <lit>const result = getPort()</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>```</lit>
                </run>
              </p>
            </text>
          </values>
        </item>
        <item id="aNWjtNoSs-s">
          <values>
            <text>
              <p>
                <run>
                  <lit>One final point - notice there is no ceremony or heads-up that we have just created three different side-effects - console IO, file IO, and possibly an exception!  You may be entirely comfortable with that, and it is unquestionably not your fault because of the lack of a type system in JavaScript.  However, to help with readability, you could add a comment that you&apos;re creating these side effects.  On big projects, when I am coding in JavaScript or Clojure, I will often declare my types in a comment using quasi-looking PureScript or Haskell type declarations. It is my subtle hint to my clients that we should be doing the project in a functional programming language that has a type system. I&apos;ll save that rant for another blog post, so moving on. </lit>
                </run>
              </p>
            </text>
          </values>
        </item>
      </children>
    </item>
    <item id="oFV9iMmbYw_" expanded="yes">
      <values>
        <text>
          <p>
            <run>
              <lit>File IO in PureScript</lit>
            </run>
          </p>
        </text>
      </values>
      <children>
        <item id="fXPjVTiISAr">
          <values>
            <text>
              <p>
                <run>
                  <lit>Our objective is port this computation to PureScript by using bind to compose nested `Either`s. But first things first - I promised to show you how to read a file using the node’s `fs` module. File IO is an NSE, and like console IO and random number generation (covered in Part 1), I’m going to use the Eff Monad to deal with it.  As I mentioned in Part 1, don&apos;t worry if you have not encountered monads yet.  I think it is better to learn by showing concrete examples of an abstraction first so that you develop an intuition about how it works.  Then, reinforce your intuition by combing through the literature to find out more about what you just performed.  Let&apos;s move ahead with the File IO code example:</lit>
                </run>
              </p>
            </text>
          </values>
        </item>
        <item id="htIgPeAMNQO">
          <values>
            <text>
              <p>
                <run>
                  <lit>```</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>module Main where</lit>
                </run>
              </p>
              <p/>
              <p>
                <run>
                  <lit>import Prelude</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>import Control.Monad.Eff (Eff)</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>import Control.Monad.Eff.Console (CONSOLE, log)</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>import Control.Monad.Eff.Exception (EXCEPTION)</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>import Node.Encoding (Encoding(..))</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>import Node.FS (FS)</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>import Node.FS.Sync (readTextFile)</lit>
                </run>
              </p>
              <p/>
              <p>
                <run>
                  <lit>main :: forall e. Eff (fs :: FS, console :: CONSOLE, exception :: EXCEPTION | e) Unit</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>main =</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>  log =&lt;&lt; readTextFile UTF8 &quot;./resources/config.json&quot;</lit>
                </run>
              </p>
              <p>
                <run>
                  <lit>```</lit>
                </run>
              </p>
            </text>
          </values>
        </item>
        <item id="i_NepBMiwSx">
          <values>
            <text>
              <p>
                <run>
                  <lit>Some of this will be familiar to you from Part 1.  But for the sake of review, let&apos;s take it from the top.  We have our usual import suspects, but also adding a few new constructs from PureScript&apos;s  Node.js modules that support reading the `config.json` file.  You can check those out using [pursuit](</lit>
                </run>
                <run>
                  <lit><cell href="https://pursuit.purescript.org" name="https://pursuit.purescript.org" type="link"/></lit>
                </run>
                <run>
                  <lit>).  In PureScript we are always explicit in our type declarations about what side effects we are creating.  In the `main` function, I am using the effect monad `Eff` to wrap the following NSEs:  First, I use the file system `FS` to read a text file.  Then I log the result from `readTextFile` to the `CONSOLE`.  And finally, an `EXCEPTION` will be raised whenever something goes wrong during `readTextFile`.  </lit>
                </run>
              </p>
            </text>
          </values>
        </item>
        <item id="bT3BgigE-zW">
          <values>
            <text>
              <p>
                <run>
                  <lit>Now, I hope you didn&apos;t miss that conspicuous bind operator `( =&lt;&lt;)` connecting `readTextFile` to `log`.  This is crucial to our understanding of how we compose nested `Either`s in the main code example below.  Remember I mentioned that the `Eff` monad wraps the effects we’re creating.  Well readTextFile generates two effects - FS and possibly EXCEPTION when something goes wrong.  Just like </lit>
                </run>
              </p>
            </text>
          </values>
        </item>
      </children>
    </item>
  </root>
</outline>
