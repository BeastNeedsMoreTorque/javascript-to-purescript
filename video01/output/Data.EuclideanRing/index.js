// Generated by psc version 0.10.5
"use strict";
var $foreign = require("./foreign");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra");
var Data_CommutativeRing = require("../Data.CommutativeRing");
var Data_Eq = require("../Data.Eq");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");
var Data_Unit = require("../Data.Unit");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var EuclideanRing = function (__superclass_Data$dotCommutativeRing$dotCommutativeRing_0, degree, div, mod) {
    this["__superclass_Data.CommutativeRing.CommutativeRing_0"] = __superclass_Data$dotCommutativeRing$dotCommutativeRing_0;
    this.degree = degree;
    this.div = div;
    this.mod = mod;
};
var mod = function (dict) {
    return dict.mod;
};
var gcd = function (__copy_dictEq) {
    return function (__copy_dictEuclideanRing) {
        return function (__copy_a) {
            return function (__copy_b) {
                var dictEq = __copy_dictEq;
                var dictEuclideanRing = __copy_dictEuclideanRing;
                var a = __copy_a;
                var b = __copy_b;
                tco: while (true) {
                    var $12 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing["__superclass_Data.CommutativeRing.CommutativeRing_0"]())["__superclass_Data.Ring.Ring_0"]())["__superclass_Data.Semiring.Semiring_0"]()));
                    if ($12) {
                        return a;
                    };
                    if (!$12) {
                        var __tco_dictEq = dictEq;
                        var __tco_dictEuclideanRing = dictEuclideanRing;
                        var __tco_a = b;
                        var __tco_b = mod(dictEuclideanRing)(a)(b);
                        dictEq = __tco_dictEq;
                        dictEuclideanRing = __tco_dictEuclideanRing;
                        a = __tco_a;
                        b = __tco_b;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Data.EuclideanRing line 80, column 3 - line 82, column 27: " + [ $12.constructor.name ]);
                };
            };
        };
    };
};
var euclideanRingUnit = new EuclideanRing(function () {
    return Data_CommutativeRing.commutativeRingUnit;
}, function (v) {
    return 1;
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
});
var euclideanRingNumber = new EuclideanRing(function () {
    return Data_CommutativeRing.commutativeRingNumber;
}, function (v) {
    return 1;
}, $foreign.numDiv, function (v) {
    return function (v1) {
        return 0.0;
    };
});
var euclideanRingInt = new EuclideanRing(function () {
    return Data_CommutativeRing.commutativeRingInt;
}, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
var div = function (dict) {
    return dict.div;
};
var lcm = function (dictEq) {
    return function (dictEuclideanRing) {
        return function (a) {
            return function (b) {
                var $13 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(((dictEuclideanRing["__superclass_Data.CommutativeRing.CommutativeRing_0"]())["__superclass_Data.Ring.Ring_0"]())["__superclass_Data.Semiring.Semiring_0"]())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing["__superclass_Data.CommutativeRing.CommutativeRing_0"]())["__superclass_Data.Ring.Ring_0"]())["__superclass_Data.Semiring.Semiring_0"]()));
                if ($13) {
                    return Data_Semiring.zero(((dictEuclideanRing["__superclass_Data.CommutativeRing.CommutativeRing_0"]())["__superclass_Data.Ring.Ring_0"]())["__superclass_Data.Semiring.Semiring_0"]());
                };
                if (!$13) {
                    return div(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing["__superclass_Data.CommutativeRing.CommutativeRing_0"]())["__superclass_Data.Ring.Ring_0"]())["__superclass_Data.Semiring.Semiring_0"]())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));
                };
                throw new Error("Failed pattern match at Data.EuclideanRing line 87, column 3 - line 89, column 24: " + [ $13.constructor.name ]);
            };
        };
    };
};
var degree = function (dict) {
    return dict.degree;
};
module.exports = {
    EuclideanRing: EuclideanRing, 
    degree: degree, 
    div: div, 
    gcd: gcd, 
    lcm: lcm, 
    mod: mod, 
    euclideanRingInt: euclideanRingInt, 
    euclideanRingNumber: euclideanRingNumber, 
    euclideanRingUnit: euclideanRingUnit
};
